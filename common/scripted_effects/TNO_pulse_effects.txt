first_every_week_script = {
	ZZZ = {
		update_market = yes
	}

	# Allow suppressed TNO alerts to reappear
	every_country = {
		if = {
			limit = { is_ai = no }
			TNO_alert_suppression_weekly_tick = yes
		}
	}
}

first_every_month_script = {
	log = "[GetDateText]: [Root.GetName]: first_every_month_script"
	add_to_variable = { month_counter = 1 }
	if = {
		limit = {
			check_variable = {
				month_counter = 13
			}
		}
		set_variable = { month_counter = 1 }
		first_every_year_script = yes
	}
	add_manpower = -100 #Why? -Pacifica #I think its to keep Anarchy Island on 0 Recruit manpower IG - OPAsian

	ZZZ = {
		add_to_variable = { econ_graph_month = 1 }
	}

	every_country = {
		set_variable = { total_pop_m = 0 }
		set_variable = { total_core_pop_m = 0 }
		every_owned_state = {
			set_temp_variable = { spm = state_population_k }
			divide_temp_variable = { spm = 1000 }
			add_to_variable = { PREV.total_pop_m = spm }
			if = {
				limit = { is_core_of = THIS }
				add_to_variable = { PREV.total_core_pop_m = spm }
			}
		}
		set_variable = { total_ncore_pop_m = total_pop_m }
		subtract_from_variable = { total_ncore_pop_m = total_core_pop_m }
	}
	
	ZZZ_econ_inflation_cycling_calculation = yes

	clear_array = GLOBAL.econ_sphere_leaders # necessary for some calcs :)

	every_country = {
		if = {
			limit = {
				econ_can_use_economy_system = yes
			}
			if = { # Moved up so policy effects update immediately
				limit = { is_ai = no }
				calculate_minimum_army_size = yes
			}
			if = {
				limit = { NOT = { has_idea = economy_multiplicative_modifiers_base } }
				add_ideas = economy_multiplicative_modifiers_base
			}
			societal_development_monthly_check = yes # update policy effectiveness first!
			econ_calculations_ON_MONTHLY = yes
			calculate_consumer_goods_need = yes #Do this after consumption so the base value won't suddenly change on the player
		}
	}

	every_country = {
		limit = {
			check_variable = { GDP = 0.0 } #already converted to billion
		}
		generate_country_gdp = yes
	}
	update_state_population_custom_growth = yes
}

#for when monthly_population is less than -1
properly_reduce_population = {
	every_controlled_state = {
		set_temp_variable = { manpower_to_remove_k = PREV.modifier@monthly_population }
		multiply_temp_variable = { manpower_to_remove_k = 100 } # lmao
		multiply_temp_variable = { manpower_to_remove_k = 0.015 } # actual pop growth rate expressed as % in 100
		multiply_temp_variable = { manpower_to_remove_k = state_population_k } # number to add in k x 100
		multiply_temp_variable = { manpower_to_remove_k = 10 }
		divide_temp_variable = { manpower_to_remove_k = 12 } # occurs monthly!
		add_manpower = var:manpower_to_remove_k
		log = "Added [?manpower_to_remove_k] to [THIS.GETNAME] "
	}
}

societal_development_monthly_check = {
	TNO_process_policy_effectiveness_monthly_tick = yes

	add_to_variable = { admin_efficiency_counter = admin_efficiency_monthly_change }
	add_to_variable = { admin_efficiency_counter = modifier@admin_efficiency_monthly_rate }
	add_to_variable = { academic_base_counter = academic_base_monthly_change }
	add_to_variable = { academic_base_counter = modifier@academic_base_monthly_rate }
	add_to_variable = { agriculture_counter = agriculture_monthly_change }
	add_to_variable = { agriculture_counter = modifier@agriculture_monthly_rate }
	add_to_variable = { healthcare_counter = healthcare_monthly_change }
	add_to_variable = { healthcare_counter = modifier@healthcare_monthly_rate }
	add_to_variable = { army_professionalism_counter = army_professionalism_monthly_change }
	add_to_variable = { army_professionalism_counter = modifier@army_professionalism_monthly_rate }
	add_to_variable = { research_facilities_counter = research_facilities_monthly_change }
	add_to_variable = { research_facilities_counter = modifier@research_facilities_monthly_rate }
	add_to_variable = { industrial_expertise_counter = industrial_expertise_monthly_change }
	add_to_variable = { industrial_expertise_counter = modifier@industrial_expertise_monthly_rate }
	add_to_variable = { industrial_equipment_counter = industrial_equipment_monthly_change }
	add_to_variable = { industrial_equipment_counter = modifier@industrial_equipment_monthly_rate }

	if = {
		limit = { check_variable = { admin_efficiency_counter > 239.99 } }
		country_event = societal_development.1102
		add_to_variable = { admin_efficiency_counter = -240 }
		multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { admin_efficiency_counter < -239.99 } }
		country_event = societal_development.1103
		add_to_variable = { admin_efficiency_counter = 240 }
		multiply_variable = { admin_efficiency_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { academic_base_counter > 239.99 } }
		country_event = societal_development.1104
		add_to_variable = { academic_base_counter = -240 }
		multiply_variable = { academic_base_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { academic_base_counter < -239.99 } }
		country_event = societal_development.1105
		add_to_variable = { academic_base_counter = 240 }
		multiply_variable = { academic_base_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { research_facilities_counter > 239.99 } }
		country_event = societal_development.1106
		add_to_variable = { research_facilities_counter = -240 }
		multiply_variable = { research_facilities_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { research_facilities_counter < -239.99 } }
		country_event = societal_development.1107
		add_to_variable = { research_facilities_counter = 240 }
		multiply_variable = { research_facilities_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { industrial_expertise_counter > 239.99 } }
		country_event = societal_development.1110
		add_to_variable = { industrial_expertise_counter = -240 }
		multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { industrial_expertise_counter < -239.99 } }
		country_event = societal_development.1111
		add_to_variable = { industrial_expertise_counter = 240 }
		multiply_variable = { industrial_expertise_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { industrial_equipment_counter > 239.99 } }
		country_event = societal_development.1112
		add_to_variable = { industrial_equipment_counter = -240 }
		multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { industrial_equipment_counter < -239.99 } }
		country_event = societal_development.1113
		add_to_variable = { industrial_equipment_counter = 240 }
		multiply_variable = { industrial_equipment_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { agriculture_counter > 239.99 } }
		country_event = societal_development.1114
		add_to_variable = { agriculture_counter = -240 }
		multiply_variable = { agriculture_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { agriculture_counter < -239.99 } }
		country_event = societal_development.1115
		add_to_variable = { agriculture_counter = 240 }
		multiply_variable = { agriculture_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { healthcare_counter > 239.99 } }
		country_event = societal_development.1108
		add_to_variable = { healthcare_counter = -240 }
		multiply_variable = { healthcare_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { healthcare_counter < -239.99 } }
		country_event = societal_development.1109
		add_to_variable = { healthcare_counter = 240 }
		multiply_variable = { healthcare_monthly_change = 0.25 }
	}

	if = {
		limit = { check_variable = { army_professionalism_counter > 239.99 } }
		country_event = societal_development.1116
		add_to_variable = { army_professionalism_counter = -240 }
		multiply_variable = { army_professionalism_monthly_change = 0.25 }
	}
	else_if = {
		limit = { check_variable = { army_professionalism_counter < -239.99 } }
		country_event = societal_development.1117
		add_to_variable = { army_professionalism_counter = 240 }
		multiply_variable = { army_professionalism_monthly_change = 0.25 }
	}
}

first_every_year_script = {
	log = "[GetDateText]: [Root.GetName]: first_every_year_script"
	GER = {
		if = {
			limit = {
				has_global_flag = german_civil_war_speervic
				NOT = { has_global_flag = SGR_natsoc_collapse }
			}
			check_speer_alignment_value = yes
		}
	}
	if = {
		limit = {
			NOT = { check_variable = { global.TNO_World_Tension = 100 } }
		}
		TNO_tension_decay = yes
	}
}

calculate_building_variables = {
	clear_variable = total_synthetic_refinery
	clear_variable = total_schools
	clear_variable = total_offices
	clear_variable = total_hospitals
	clear_variable = total_barracks
	clear_variable = total_prisons
	clear_variable = total_thermo_plants
	clear_variable = total_nuclear_reactors

	set_variable = { school_in_best_empty_state = 0 }
	set_variable = { office_in_best_empty_state = 0 }
	set_variable = { hospital_in_best_empty_state = 0 }
	set_variable = { barrack_in_best_empty_state = 0 }
	set_variable = { prison_in_best_empty_state = 0 }

	set_variable = { schools_country_effect = 0 }
	set_variable = { offices_country_effect = 0 }
	set_variable = { hospitals_country_effect = 0 }
	set_variable = { barracks_country_effect = 0 }
	set_variable = { prisons_country_effect = 0 }
	set_variable = { altered_num_owned_states = num_owned_states }
	set_variable = { total_slot_calculation = 0 }

	every_owned_state = {
		if = {
			limit = { NOT = { check_variable = { TNO_lights = 2 } } }
			add_to_variable = { PREV.total_synthetic_refinery = non_damaged_building_level@synthetic_refinery }
			add_to_variable = { PREV.total_schools = non_damaged_building_level@schools }
			add_to_variable = { PREV.total_offices = non_damaged_building_level@offices }
			add_to_variable = { PREV.total_hospitals = non_damaged_building_level@hospitals }
			add_to_variable = { PREV.total_barracks = non_damaged_building_level@barracks }
			add_to_variable = { PREV.total_prisons = non_damaged_building_level@prisons }
		}
		add_to_variable = { PREV.total_thermo_plants = non_damaged_building_level@thermoelectric_plant }
		add_to_variable = { PREV.total_nuclear_reactors = non_damaged_building_level@nuclear_reactor }
	}

	if = {
		limit = { has_country_flag = TNO_eliminate_building_demand }
		set_variable = { schools_research_modifier = 0 }
		set_variable = { schools_fac_max_efficiency_modifier = 0 }
		set_variable = { offices_PP_modifier = 0 }
		set_variable = { offices_supply_usage_modifier = 0 }
		set_variable = { offices_attrition_modifier = 0 }
		set_variable = { hospitals_pop_growth_modifier = 0 }
		set_variable = { hospitals_org_regain_modifier = 0 }
		set_variable = { hospitals_healthcare_modifier = 0 }
		set_variable = { barracks_manpower_modifier = 0 }
		set_variable = { barracks_org_modifier = 0 }
		set_variable = { barracks_mob_speed_modifier = 0 }
		set_variable = { prisons_compliance_modifier = 0 }
		set_variable = { prisons_stab_modifier = 0 }
		set_variable = { prisons_garrisons_modifier = 0 }
	}
	else = {

		set_variable = { TNO_school_coverage = 0 }
		set_variable = { TNO_office_coverage = 0 }
		set_variable = { TNO_hospital_coverage = 0 }
		set_variable = { TNO_barrack_coverage = 0 }
		set_variable = { TNO_prison_coverage = 0 }
		set_variable = { slot_multiplier = modifier@global_building_slots_factor }
		add_to_variable = { slot_multiplier = 1 }
		set_variable = { slot_addition = modifier@global_building_slots }



		every_owned_state = {
			set_temp_variable = { local_slot_multiplier = modifier@local_building_slots_factor }
			add_to_temp_variable = { local_slot_multiplier = 1 }
			set_temp_variable = { local_slots = modifier@local_building_slots }
			add_to_temp_variable = { local_slots = PREV.slot_addition }
			multiply_temp_variable = { local_slots = local_slot_multiplier }
			multiply_temp_variable = { local_slots = PREV.slot_multiplier }
			if = { limit = { check_variable = { local_slots < 1 } }
				add_to_variable = { PREV.altered_num_owned_states = -1 }
				#If a state has no building slot, it's deduced from your total number of states
			}
			#Calculation so that number of building required < number of building you can possibly build
			if = { limit = { check_variable = { local_slots > 1 } }
				round_temp_variable = local_slots
			}
			clamp_temp_variable = {
				var = local_slots
				max = 5
				min = 0
			}
			set_variable = { local_gdp_percentage = state_value }
			divide_variable = { local_gdp_percentage = PREV.GDP }
			divide_variable = { local_gdp_percentage = 1000 }
			set_variable = { local_pop_percentage = state_population_k }
			divide_variable = { local_pop_percentage = PREV.max_manpower_k }
			add_to_variable = { PREV.total_slot_calculation = local_slots }

			calculate_schools_bonus_state = yes
			calculate_offices_bonus_state = yes
			calculate_hospitals_bonus_state = yes
			calculate_barracks_bonus_state = yes
			calculate_prisons_bonus_state = yes

			if = {
				limit = { check_variable = { local_slots > 0.99 } }
				if = {
					limit = { check_variable = { local_slots < 5 } } #We approximate as one building give 1/local slots because fuck it.

					#percentage of state effect
					set_temp_variable = { state_effect_schools = non_damaged_building_level@schools }
					divide_temp_variable = { state_effect_schools = local_slots }

					set_temp_variable = { state_effect_offices = non_damaged_building_level@offices }
					divide_temp_variable = { state_effect_offices = local_slots }

					set_temp_variable = { state_effect_hospitals = non_damaged_building_level@hospitals }
					divide_temp_variable = { state_effect_hospitals = local_slots }

					set_temp_variable = { state_effect_barracks = non_damaged_building_level@barracks }
					divide_temp_variable = { state_effect_barracks = local_slots }

					set_temp_variable = { state_effect_prisons = non_damaged_building_level@prisons }
					divide_temp_variable = { state_effect_prisons = local_slots }
				}
				else = {
					set_temp_variable = { state_effect_schools = global.cube_table_for_buildings^non_damaged_building_level@schools }
					set_temp_variable = { state_effect_offices = global.cube_table_for_buildings^non_damaged_building_level@offices }
					set_temp_variable = { state_effect_prisons = global.cube_table_for_buildings^non_damaged_building_level@prisons }
					set_temp_variable = { state_effect_hospitals = global.cube_table_for_buildings^non_damaged_building_level@hospitals }
					set_temp_variable = { state_effect_barracks = global.cube_table_for_buildings^non_damaged_building_level@barracks }
				}

				set_variable = { schools_in_state_effect = state_effect_schools }
				multiply_variable = { schools_in_state_effect = full_effect_schools_in_state }
				add_to_variable = { PREV.TNO_school_coverage = schools_in_state_effect }

				#calculation for if extra building created in this province.
				if = {
					limit = {
						PREV = { is_ai = no }
						check_variable = { local_slots > non_damaged_building_level@schools }
					}
					set_variable = { theoric_school = 1 }
					add_to_variable = { theoric_school = non_damaged_building_level@schools }
					set_variable = { theoric_school = global.cube_table_for_buildings^theoric_school }
					multiply_variable = { theoric_school = full_effect_schools_in_state }
					subtract_from_variable = { theoric_school = schools_in_state_effect }
					if = {
						limit = { check_variable = { theoric_school > PREV.school_in_best_empty_state } }
						set_variable = { PREV.school_in_best_empty_state = theoric_school }
						set_variable = { PREV.best_empty_state_school = THIS }
					}
				}

				set_variable = { offices_in_state_effect = state_effect_offices }
				multiply_variable = { offices_in_state_effect = full_effect_offices_in_state }
				add_to_variable = { PREV.TNO_office_coverage = offices_in_state_effect }

				#calculation for if extra building created in this province.
				if = {
					limit = {
						PREV = { is_ai = no }
						check_variable = { local_slots > non_damaged_building_level@offices }
					}
					set_variable = { theoric_office = 1 }
					add_to_variable = { theoric_office = non_damaged_building_level@offices }
					set_variable = { theoric_office = global.cube_table_for_buildings^theoric_office }
					multiply_variable = { theoric_office = full_effect_offices_in_state }
					subtract_from_variable = { theoric_office = offices_in_state_effect }
					if = {
						limit = { check_variable = { theoric_office > PREV.office_in_best_empty_state } }
						set_variable = { PREV.office_in_best_empty_state = theoric_office }
						set_variable = { PREV.best_empty_state_office = THIS }
					}
				}

				set_variable = { hospitals_in_state_effect = state_effect_hospitals }
				multiply_variable = { hospitals_in_state_effect = full_effect_hospitals_in_state }
				add_to_variable = { PREV.TNO_hospital_coverage = hospitals_in_state_effect }

				#calculation for if extra building created in this province.
				if = {
					limit = {
						PREV = { is_ai = no }
						check_variable = { local_slots > non_damaged_building_level@hospitals }
					}
					set_variable = { theoric_hospital = 1 }
					add_to_variable = { theoric_hospital = non_damaged_building_level@hospitals }
					set_variable = { theoric_hospital = global.cube_table_for_buildings^theoric_hospital }
					multiply_variable = { theoric_hospital = full_effect_hospitals_in_state }
					subtract_from_variable = { theoric_hospital = hospitals_in_state_effect }
					if = {
						limit = { check_variable = { theoric_hospital > PREV.hospital_in_best_empty_state } }
						set_variable = { PREV.hospital_in_best_empty_state = theoric_hospital }
						set_variable = { PREV.best_empty_state_hospital = THIS }
					}
				}

				set_variable = { barracks_in_state_effect = state_effect_barracks }
				multiply_variable = { barracks_in_state_effect = full_effect_barracks_in_state }
				add_to_variable = { PREV.TNO_barrack_coverage = barracks_in_state_effect }

				#calculation for if extra building created in this province.
				if = {
					limit = {
						PREV = { is_ai = no }
						check_variable = { local_slots > non_damaged_building_level@barracks }
					}
					set_variable = { theoric_barrack = 1 }
					add_to_variable = { theoric_barrack = non_damaged_building_level@barracks }
					set_variable = { theoric_barrack = global.cube_table_for_buildings^theoric_barrack }
					multiply_variable = { theoric_barrack = full_effect_barracks_in_state }
					subtract_from_variable = { theoric_barrack = barracks_in_state_effect }
					if = {
						limit = { check_variable = { theoric_barrack > PREV.barrack_in_best_empty_state } }
						set_variable = { PREV.barrack_in_best_empty_state = theoric_barrack }
						set_variable = { PREV.best_empty_state_barrack = THIS }
					}
				}

				set_variable = { Prisons_in_state_effect = state_effect_prisonS }
				multiply_variable = { Prisons_in_state_effect = full_effect_prisons_in_state }
				add_to_variable = { PREV.TNO_prison_coverage = prisons_in_state_effect }

				#calculation for if extra building created in this province.
				if = {
					limit = {
						PREV = { is_ai = no }
						check_variable = { local_slots > non_damaged_building_level@prisons }
					}
					set_variable = { theoric_prison = 1 }
					add_to_variable = { theoric_prison = non_damaged_building_level@prisons }
					set_variable = { theoric_prison = global.cube_table_for_buildings^theoric_prison }
					multiply_variable = { theoric_prison = full_effect_prisons_in_state }
					subtract_from_variable = { theoric_prison = prisons_in_state_effect }
					if = {
						limit = { check_variable = { theoric_prison > PREV.prison_in_best_empty_state } }
						set_variable = { PREV.prison_in_best_empty_state = theoric_prison }
						set_variable = { PREV.best_empty_state_prison = THIS }
					}
				}
			}
		}

		set_variable = { raw_school_coverage = total_schools }
		divide_variable = { raw_school_coverage = total_slot_calculation }
		clamp_variable = {
			var = raw_school_coverage
			max = 1
			min = 0
		}

		set_variable = { raw_office_coverage = total_offices }
		divide_variable = { raw_office_coverage = total_slot_calculation }
		clamp_variable = {
			var = raw_office_coverage
			max = 1
			min = 0
		}

		set_variable = { raw_hospital_coverage = total_hospitals }
		divide_variable = { raw_hospital_coverage = total_slot_calculation }
		clamp_variable = {
			var = raw_hospital_coverage
			max = 1
			min = 0
		}

		set_variable = { raw_barrack_coverage = total_barracks }
		divide_variable = { raw_barrack_coverage = total_slot_calculation }
		clamp_variable = {
			var = raw_barrack_coverage
			max = 1
			min = 0
		}

		set_variable = { raw_prison_coverage = total_prisons }
		divide_variable = { raw_prison_coverage = total_slot_calculation }
		clamp_variable = {
			var = raw_prison_coverage
			max = 1
			min = 0
		}

		#final factor calculation
		add_to_variable = { TNO_school_coverage = raw_school_coverage }
		add_to_variable = { TNO_office_coverage = raw_office_coverage }
		add_to_variable = { TNO_hospital_coverage = raw_hospital_coverage }
		add_to_variable = { TNO_barrack_coverage = raw_barrack_coverage }
		add_to_variable = { TNO_prison_coverage = raw_prison_coverage }

		clamp_variable = { var = TNO_school_coverage max = 1 min = 0 }
		clamp_variable = { var = TNO_office_coverage max = 1 min = 0 }
		clamp_variable = { var = TNO_hospital_coverage max = 1 min = 0 }
		clamp_variable = { var = TNO_barrack_coverage max = 1 min = 0 }
		clamp_variable = { var = TNO_prison_coverage max = 1 min = 0 }

		if = {
			limit = { always = yes }

			set_variable = { TNO_prison_coverage_percent_gui = TNO_prison_coverage }
			multiply_variable = { TNO_prison_coverage_percent_gui = 100 }

			set_variable = { TNO_hospital_coverage_percent_gui = TNO_hospital_coverage }
			multiply_variable = { TNO_hospital_coverage_percent_gui = 100 }

			set_variable = { TNO_school_coverage_percent_gui = TNO_school_coverage }
			multiply_variable = { TNO_school_coverage_percent_gui = 100 }

			set_variable = { TNO_barrack_coverage_percent_gui = TNO_barrack_coverage }
			multiply_variable = { TNO_barrack_coverage_percent_gui = 100 }

			set_variable = { TNO_office_coverage_percent_gui = TNO_office_coverage }
			multiply_variable = { TNO_office_coverage_percent_gui = 100 }

			set_variable = { best_state_for_schools = best_empty_state_school }
			set_variable = { school_in_best_state_bonus_research = school_in_best_empty_state }
			add_to_variable = { school_in_best_state_bonus_research = bonus_slot }
			divide_variable = { school_in_best_state_bonus_research = 2 }
			set_variable = { school_in_best_state_bonus_fac_max_efficiency = school_in_best_state_bonus_research }

			set_variable = { best_state_for_office = best_empty_state_office }
			set_variable = { office_in_best_state_bonus_pp = office_in_best_empty_state }
			add_to_variable = { office_in_best_state_bonus_pp = bonus_slot }
			divide_variable = { office_in_best_state_bonus_pp = 2 }
			set_variable = { office_in_best_state_bonus_supply_usage = office_in_best_state_bonus_pp }
			set_variable = { office_in_best_state_bonus_attrition = office_in_best_state_bonus_pp }

			set_variable = { best_state_for_hospital = best_empty_state_hospital }
			set_variable = { hospital_in_best_state_bonus_pop_growth = hospital_in_best_empty_state }
			add_to_variable = { hospital_in_best_state_bonus_pop_growth = bonus_slot }
			divide_variable = { hospital_in_best_state_bonus_pop_growth = 2 }
			set_variable = { hospital_in_best_state_bonus_org_regain = hospital_in_best_state_bonus_pop_growth }

			set_variable = { best_state_for_barracks = best_empty_state_barrack }
			set_variable = { barrack_in_best_state_bonus_manpower = barrack_in_best_empty_state }
			add_to_variable = { barrack_in_best_state_bonus_manpower = bonus_slot }
			divide_variable = { barrack_in_best_state_bonus_manpower = 2 }
			set_variable = { barrack_in_best_state_bonus_org = barrack_in_best_state_bonus_manpower }
			set_variable = { barrack_in_best_state_bonus_mob_speed = barrack_in_best_state_bonus_manpower }

			set_variable = { best_state_for_prisons = best_empty_state_prison }
			set_variable = { Prison_in_best_state_bonus_stab = prison_in_best_empty_state }
			add_to_variable = { Prison_in_best_state_bonus_stab = bonus_slot }
			divide_variable = { Prison_in_best_state_bonus_stab = 2 }
			set_variable = { Prison_in_best_state_bonus_compliance_gain = prison_in_best_state_bonus_stab }
			set_variable = { Prison_in_best_state_bonus_garrisons = prison_in_best_state_bonus_stab }
		}

		set_temp_variable = { bonus_slot = 1 }
		divide_temp_variable = { bonus_slot = total_slot_calculation }

		update_buildings_modifier = yes
	}

	set_variable = { buildings_power_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_power_demand = 4 }
	set_variable = { num_of_silos_power_demand = num_of_silos }
	multiply_variable = { num_of_silos_power_demand = 2 }

	add_to_variable = { buildings_power_demand = num_of_silos_power_demand }
	add_to_variable = { buildings_power_demand = used_naval_facs }
	add_to_variable = { buildings_power_demand = total_synthetic_refinery }
	add_to_variable = { buildings_power_demand = total_schools }
	add_to_variable = { buildings_power_demand = total_offices }
	add_to_variable = { buildings_power_demand = total_hospitals }
	add_to_variable = { buildings_power_demand = total_barracks }
	add_to_variable = { buildings_power_demand = total_prisons }

	divide_variable = { buildings_power_demand = 2 }

	set_variable = { buildings_oil_demand = total_thermo_plants }

	set_variable = { buildings_uranium_demand = num_of_enrichment_plants }
	multiply_variable = { buildings_uranium_demand = 6 }
	set_variable = { num_of_nuclear_reactors_uranium_demand = total_nuclear_reactors }
	multiply_variable = { num_of_nuclear_reactors_uranium_demand = 4 }
	add_to_variable = { buildings_uranium_demand = num_of_nuclear_reactors_uranium_demand }

	force_update_map_mode = { mapmode = tno_econ_building_map_mode }
}

